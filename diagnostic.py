#!/usr/bin/env python3
"""
Script de diagnostic pour v√©rifier la configuration avant d√©ploiement
"""
import os
import sys
import traceback
from pathlib import Path

def check_environment_variables():
    """V√©rifier les variables d'environnement critiques"""
    print("üîç V√©rification des variables d'environnement...")
    
    required_vars = [
        "DATABASE_URL",
        "SECRET_KEY", 
        "GROQ_API_KEY",
        "GOOGLE_APPLICATION_CREDENTIALS_JSON"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"‚ùå {var}: NON D√âFINIE")
        else:
            # Masquer les valeurs sensibles
            if len(value) > 20:
                display_value = f"{value[:10]}...{value[-10:]}"
            else:
                display_value = f"{value[:5]}..."
            print(f"‚úÖ {var}: {display_value}")
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  Variables manquantes: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Toutes les variables critiques sont d√©finies")
    return True

def check_database_url():
    """V√©rifier le format de DATABASE_URL"""
    print("\nüîç V√©rification de DATABASE_URL...")
    
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("‚ùå DATABASE_URL non d√©finie")
        return False
    
    # Tester le parsing de l'URL
    try:
        from sqlalchemy.engine.url import make_url
        url = make_url(db_url)
        print(f"‚úÖ DATABASE_URL valide:")
        print(f"   - Dialecte: {url.drivername}")
        print(f"   - Host: {url.host}")
        print(f"   - Port: {url.port}")
        print(f"   - Database: {url.database}")
        return True
    except Exception as e:
        print(f"‚ùå DATABASE_URL invalide: {e}")
        return False

def check_google_credentials():
    """V√©rifier les credentials Google Cloud"""
    print("\nüîç V√©rification des credentials Google Cloud...")
    
    creds_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
    if not creds_json:
        print("‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON non d√©finie")
        return False
    
    try:
        import base64
        import json
        
        # D√©coder base64
        decoded = base64.b64decode(creds_json)
        creds = json.loads(decoded)
        
        required_fields = ["type", "project_id", "private_key", "client_email"]
        for field in required_fields:
            if field not in creds:
                print(f"‚ùå Champ manquant dans les credentials: {field}")
                return False
        
        print("‚úÖ Credentials Google Cloud valides")
        print(f"   - Project ID: {creds.get('project_id')}")
        print(f"   - Client Email: {creds.get('client_email')}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des credentials: {e}")
        return False

def check_app_imports():
    """V√©rifier que l'application peut √™tre import√©e"""
    print("\nüîç V√©rification des imports de l'application...")
    
    try:
        # Ajouter le r√©pertoire racine au path
        root_dir = Path(__file__).parent
        sys.path.insert(0, str(root_dir))
        
        # Tester l'import des settings
        from app.config.settings import settings
        print(f"‚úÖ Settings import√©es - Environment: {settings.ENVIRONMENT}")
        
        # Tester l'import de l'app principale
        from app.main import app
        print("‚úÖ Application FastAPI import√©e avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import de l'application:")
        print(f"   {e}")
        traceback.print_exc()
        return False

def check_dependencies():
    """V√©rifier les d√©pendances critiques"""
    print("\nüîç V√©rification des d√©pendances...")
    
    critical_packages = [
        "fastapi",
        "uvicorn", 
        "sqlalchemy",
        "groq",
        "google-cloud-translate"
    ]
    
    missing_packages = []
    for package in critical_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Packages manquants: {', '.join(missing_packages)}")
        return False
    
    return True

def main():
    """Fonction principale de diagnostic"""
    print("üöÄ DIAGNOSTIC JAARI RAG API")
    print("=" * 50)
    
    checks = [
        ("Variables d'environnement", check_environment_variables),
        ("Format DATABASE_URL", check_database_url),
        ("Credentials Google Cloud", check_google_credentials),
        ("D√©pendances", check_dependencies),
        ("Imports application", check_app_imports)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans {name}: {e}")
            results.append((name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("=" * 50)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {name}")
        if result:
            passed += 1
    
    print(f"\nüéØ Score: {passed}/{len(results)} v√©rifications r√©ussies")
    
    if passed == len(results):
        print("üéâ Toutes les v√©rifications sont pass√©es ! L'application est pr√™te pour le d√©ploiement.")
        return 0
    else:
        print("‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©. Corrigez les probl√®mes avant le d√©ploiement.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
